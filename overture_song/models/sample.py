# coding: utf-8

"""
    Song API

    Song API reference for developers. SONG is an open source system for validating and tracking metadata about raw data submissions, assigning identifiers to entities of interest, and managing the state of the raw data with regards to publication and access  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Sample(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'info': 'JsonNode',
        'matched_normal_submitter_sample_id': 'str',
        'sample_id': 'str',
        'sample_type': 'str',
        'specimen_id': 'str',
        'submitter_sample_id': 'str'
    }

    attribute_map = {
        'info': 'info',
        'matched_normal_submitter_sample_id': 'matchedNormalSubmitterSampleId',
        'sample_id': 'sampleId',
        'sample_type': 'sampleType',
        'specimen_id': 'specimenId',
        'submitter_sample_id': 'submitterSampleId'
    }

    def __init__(self, info=None, matched_normal_submitter_sample_id=None, sample_id=None, sample_type=None, specimen_id=None, submitter_sample_id=None):  # noqa: E501
        """Sample - a model defined in Swagger"""  # noqa: E501

        self._info = None
        self._matched_normal_submitter_sample_id = None
        self._sample_id = None
        self._sample_type = None
        self._specimen_id = None
        self._submitter_sample_id = None
        self.discriminator = None

        if info is not None:
            self.info = info
        if matched_normal_submitter_sample_id is not None:
            self.matched_normal_submitter_sample_id = matched_normal_submitter_sample_id
        if sample_id is not None:
            self.sample_id = sample_id
        if sample_type is not None:
            self.sample_type = sample_type
        if specimen_id is not None:
            self.specimen_id = specimen_id
        if submitter_sample_id is not None:
            self.submitter_sample_id = submitter_sample_id

    @property
    def info(self):
        """Gets the info of this Sample.  # noqa: E501


        :return: The info of this Sample.  # noqa: E501
        :rtype: JsonNode
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this Sample.


        :param info: The info of this Sample.  # noqa: E501
        :type: JsonNode
        """

        self._info = info

    @property
    def matched_normal_submitter_sample_id(self):
        """Gets the matched_normal_submitter_sample_id of this Sample.  # noqa: E501


        :return: The matched_normal_submitter_sample_id of this Sample.  # noqa: E501
        :rtype: str
        """
        return self._matched_normal_submitter_sample_id

    @matched_normal_submitter_sample_id.setter
    def matched_normal_submitter_sample_id(self, matched_normal_submitter_sample_id):
        """Sets the matched_normal_submitter_sample_id of this Sample.


        :param matched_normal_submitter_sample_id: The matched_normal_submitter_sample_id of this Sample.  # noqa: E501
        :type: str
        """

        self._matched_normal_submitter_sample_id = matched_normal_submitter_sample_id

    @property
    def sample_id(self):
        """Gets the sample_id of this Sample.  # noqa: E501


        :return: The sample_id of this Sample.  # noqa: E501
        :rtype: str
        """
        return self._sample_id

    @sample_id.setter
    def sample_id(self, sample_id):
        """Sets the sample_id of this Sample.


        :param sample_id: The sample_id of this Sample.  # noqa: E501
        :type: str
        """

        self._sample_id = sample_id

    @property
    def sample_type(self):
        """Gets the sample_type of this Sample.  # noqa: E501


        :return: The sample_type of this Sample.  # noqa: E501
        :rtype: str
        """
        return self._sample_type

    @sample_type.setter
    def sample_type(self, sample_type):
        """Sets the sample_type of this Sample.


        :param sample_type: The sample_type of this Sample.  # noqa: E501
        :type: str
        """

        self._sample_type = sample_type

    @property
    def specimen_id(self):
        """Gets the specimen_id of this Sample.  # noqa: E501


        :return: The specimen_id of this Sample.  # noqa: E501
        :rtype: str
        """
        return self._specimen_id

    @specimen_id.setter
    def specimen_id(self, specimen_id):
        """Sets the specimen_id of this Sample.


        :param specimen_id: The specimen_id of this Sample.  # noqa: E501
        :type: str
        """

        self._specimen_id = specimen_id

    @property
    def submitter_sample_id(self):
        """Gets the submitter_sample_id of this Sample.  # noqa: E501


        :return: The submitter_sample_id of this Sample.  # noqa: E501
        :rtype: str
        """
        return self._submitter_sample_id

    @submitter_sample_id.setter
    def submitter_sample_id(self, submitter_sample_id):
        """Sets the submitter_sample_id of this Sample.


        :param submitter_sample_id: The submitter_sample_id of this Sample.  # noqa: E501
        :type: str
        """

        self._submitter_sample_id = submitter_sample_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Sample, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Sample):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
