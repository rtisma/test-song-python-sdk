# coding: utf-8

"""
    Song API

    Song API reference for developers. SONG is an open source system for validating and tracking metadata about raw data submissions, assigning identifiers to entities of interest, and managing the state of the raw data with regards to publication and access  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Legacy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access': 'str',
        'file_name': 'str',
        'gnos_id': 'str',
        'id': 'str',
        'project_code': 'str'
    }

    attribute_map = {
        'access': 'access',
        'file_name': 'fileName',
        'gnos_id': 'gnosId',
        'id': 'id',
        'project_code': 'projectCode'
    }

    def __init__(self, access=None, file_name=None, gnos_id=None, id=None, project_code=None):  # noqa: E501
        """Legacy - a model defined in Swagger"""  # noqa: E501

        self._access = None
        self._file_name = None
        self._gnos_id = None
        self._id = None
        self._project_code = None
        self.discriminator = None

        if access is not None:
            self.access = access
        if file_name is not None:
            self.file_name = file_name
        if gnos_id is not None:
            self.gnos_id = gnos_id
        if id is not None:
            self.id = id
        if project_code is not None:
            self.project_code = project_code

    @property
    def access(self):
        """Gets the access of this Legacy.  # noqa: E501


        :return: The access of this Legacy.  # noqa: E501
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this Legacy.


        :param access: The access of this Legacy.  # noqa: E501
        :type: str
        """

        self._access = access

    @property
    def file_name(self):
        """Gets the file_name of this Legacy.  # noqa: E501


        :return: The file_name of this Legacy.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this Legacy.


        :param file_name: The file_name of this Legacy.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def gnos_id(self):
        """Gets the gnos_id of this Legacy.  # noqa: E501


        :return: The gnos_id of this Legacy.  # noqa: E501
        :rtype: str
        """
        return self._gnos_id

    @gnos_id.setter
    def gnos_id(self, gnos_id):
        """Sets the gnos_id of this Legacy.


        :param gnos_id: The gnos_id of this Legacy.  # noqa: E501
        :type: str
        """

        self._gnos_id = gnos_id

    @property
    def id(self):
        """Gets the id of this Legacy.  # noqa: E501


        :return: The id of this Legacy.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Legacy.


        :param id: The id of this Legacy.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def project_code(self):
        """Gets the project_code of this Legacy.  # noqa: E501


        :return: The project_code of this Legacy.  # noqa: E501
        :rtype: str
        """
        return self._project_code

    @project_code.setter
    def project_code(self, project_code):
        """Sets the project_code of this Legacy.


        :param project_code: The project_code of this Legacy.  # noqa: E501
        :type: str
        """

        self._project_code = project_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Legacy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Legacy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
