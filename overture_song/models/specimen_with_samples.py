# coding: utf-8

"""
    Song API

    Song API reference for developers. SONG is an open source system for validating and tracking metadata about raw data submissions, assigning identifiers to entities of interest, and managing the state of the raw data with regards to publication and access  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SpecimenWithSamples(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'donor_id': 'str',
        'info': 'JsonNode',
        'samples': 'list[Sample]',
        'specimen': 'Specimen',
        'specimen_id': 'str',
        'specimen_tissue_source': 'str',
        'specimen_type': 'str',
        'submitter_specimen_id': 'str',
        'tumour_normal_designation': 'str'
    }

    attribute_map = {
        'donor_id': 'donorId',
        'info': 'info',
        'samples': 'samples',
        'specimen': 'specimen',
        'specimen_id': 'specimenId',
        'specimen_tissue_source': 'specimenTissueSource',
        'specimen_type': 'specimenType',
        'submitter_specimen_id': 'submitterSpecimenId',
        'tumour_normal_designation': 'tumourNormalDesignation'
    }

    def __init__(self, donor_id=None, info=None, samples=None, specimen=None, specimen_id=None, specimen_tissue_source=None, specimen_type=None, submitter_specimen_id=None, tumour_normal_designation=None):  # noqa: E501
        """SpecimenWithSamples - a model defined in Swagger"""  # noqa: E501

        self._donor_id = None
        self._info = None
        self._samples = None
        self._specimen = None
        self._specimen_id = None
        self._specimen_tissue_source = None
        self._specimen_type = None
        self._submitter_specimen_id = None
        self._tumour_normal_designation = None
        self.discriminator = None

        if donor_id is not None:
            self.donor_id = donor_id
        if info is not None:
            self.info = info
        if samples is not None:
            self.samples = samples
        if specimen is not None:
            self.specimen = specimen
        if specimen_id is not None:
            self.specimen_id = specimen_id
        if specimen_tissue_source is not None:
            self.specimen_tissue_source = specimen_tissue_source
        if specimen_type is not None:
            self.specimen_type = specimen_type
        if submitter_specimen_id is not None:
            self.submitter_specimen_id = submitter_specimen_id
        if tumour_normal_designation is not None:
            self.tumour_normal_designation = tumour_normal_designation

    @property
    def donor_id(self):
        """Gets the donor_id of this SpecimenWithSamples.  # noqa: E501


        :return: The donor_id of this SpecimenWithSamples.  # noqa: E501
        :rtype: str
        """
        return self._donor_id

    @donor_id.setter
    def donor_id(self, donor_id):
        """Sets the donor_id of this SpecimenWithSamples.


        :param donor_id: The donor_id of this SpecimenWithSamples.  # noqa: E501
        :type: str
        """

        self._donor_id = donor_id

    @property
    def info(self):
        """Gets the info of this SpecimenWithSamples.  # noqa: E501


        :return: The info of this SpecimenWithSamples.  # noqa: E501
        :rtype: JsonNode
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this SpecimenWithSamples.


        :param info: The info of this SpecimenWithSamples.  # noqa: E501
        :type: JsonNode
        """

        self._info = info

    @property
    def samples(self):
        """Gets the samples of this SpecimenWithSamples.  # noqa: E501


        :return: The samples of this SpecimenWithSamples.  # noqa: E501
        :rtype: list[Sample]
        """
        return self._samples

    @samples.setter
    def samples(self, samples):
        """Sets the samples of this SpecimenWithSamples.


        :param samples: The samples of this SpecimenWithSamples.  # noqa: E501
        :type: list[Sample]
        """

        self._samples = samples

    @property
    def specimen(self):
        """Gets the specimen of this SpecimenWithSamples.  # noqa: E501


        :return: The specimen of this SpecimenWithSamples.  # noqa: E501
        :rtype: Specimen
        """
        return self._specimen

    @specimen.setter
    def specimen(self, specimen):
        """Sets the specimen of this SpecimenWithSamples.


        :param specimen: The specimen of this SpecimenWithSamples.  # noqa: E501
        :type: Specimen
        """

        self._specimen = specimen

    @property
    def specimen_id(self):
        """Gets the specimen_id of this SpecimenWithSamples.  # noqa: E501


        :return: The specimen_id of this SpecimenWithSamples.  # noqa: E501
        :rtype: str
        """
        return self._specimen_id

    @specimen_id.setter
    def specimen_id(self, specimen_id):
        """Sets the specimen_id of this SpecimenWithSamples.


        :param specimen_id: The specimen_id of this SpecimenWithSamples.  # noqa: E501
        :type: str
        """

        self._specimen_id = specimen_id

    @property
    def specimen_tissue_source(self):
        """Gets the specimen_tissue_source of this SpecimenWithSamples.  # noqa: E501


        :return: The specimen_tissue_source of this SpecimenWithSamples.  # noqa: E501
        :rtype: str
        """
        return self._specimen_tissue_source

    @specimen_tissue_source.setter
    def specimen_tissue_source(self, specimen_tissue_source):
        """Sets the specimen_tissue_source of this SpecimenWithSamples.


        :param specimen_tissue_source: The specimen_tissue_source of this SpecimenWithSamples.  # noqa: E501
        :type: str
        """

        self._specimen_tissue_source = specimen_tissue_source

    @property
    def specimen_type(self):
        """Gets the specimen_type of this SpecimenWithSamples.  # noqa: E501


        :return: The specimen_type of this SpecimenWithSamples.  # noqa: E501
        :rtype: str
        """
        return self._specimen_type

    @specimen_type.setter
    def specimen_type(self, specimen_type):
        """Sets the specimen_type of this SpecimenWithSamples.


        :param specimen_type: The specimen_type of this SpecimenWithSamples.  # noqa: E501
        :type: str
        """

        self._specimen_type = specimen_type

    @property
    def submitter_specimen_id(self):
        """Gets the submitter_specimen_id of this SpecimenWithSamples.  # noqa: E501


        :return: The submitter_specimen_id of this SpecimenWithSamples.  # noqa: E501
        :rtype: str
        """
        return self._submitter_specimen_id

    @submitter_specimen_id.setter
    def submitter_specimen_id(self, submitter_specimen_id):
        """Sets the submitter_specimen_id of this SpecimenWithSamples.


        :param submitter_specimen_id: The submitter_specimen_id of this SpecimenWithSamples.  # noqa: E501
        :type: str
        """

        self._submitter_specimen_id = submitter_specimen_id

    @property
    def tumour_normal_designation(self):
        """Gets the tumour_normal_designation of this SpecimenWithSamples.  # noqa: E501


        :return: The tumour_normal_designation of this SpecimenWithSamples.  # noqa: E501
        :rtype: str
        """
        return self._tumour_normal_designation

    @tumour_normal_designation.setter
    def tumour_normal_designation(self, tumour_normal_designation):
        """Sets the tumour_normal_designation of this SpecimenWithSamples.


        :param tumour_normal_designation: The tumour_normal_designation of this SpecimenWithSamples.  # noqa: E501
        :type: str
        """

        self._tumour_normal_designation = tumour_normal_designation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpecimenWithSamples, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpecimenWithSamples):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
