# coding: utf-8

"""
    Song API

    Song API reference for developers. SONG is an open source system for validating and tracking metadata about raw data submissions, assigning identifiers to entities of interest, and managing the state of the raw data with regards to publication and access  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from overture_song.api_client import ApiClient


class SubmitApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def submit(self, json_payload, study_id, **kwargs):  # noqa: E501
        """Submit  # noqa: E501

        Synchronously submit a json payload  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit(json_payload, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str json_payload: json_payload (required)
        :param str study_id: studyId (required)
        :return: SubmitResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.submit_with_http_info(json_payload, study_id, **kwargs)  # noqa: E501
        else:
            (data) = self.submit_with_http_info(json_payload, study_id, **kwargs)  # noqa: E501
            return data

    def submit_with_http_info(self, json_payload, study_id, **kwargs):  # noqa: E501
        """Submit  # noqa: E501

        Synchronously submit a json payload  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_with_http_info(json_payload, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str json_payload: json_payload (required)
        :param str study_id: studyId (required)
        :return: SubmitResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['json_payload', 'study_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'json_payload' is set
        if ('json_payload' not in params or
                params['json_payload'] is None):
            raise ValueError("Missing the required parameter `json_payload` when calling `submit`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `submit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'json_payload' in params:
            body_params = params['json_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/submit/{studyId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubmitResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
