# coding: utf-8

"""
    Song API

    Song API reference for developers. SONG is an open source system for validating and tracking metadata about raw data submissions, assigning identifiers to entities of interest, and managing the state of the raw data with regards to publication and access  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PageDTOAnalysisType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'limit': 'int',
        'offset': 'int',
        'result_set': 'list[AnalysisType]'
    }

    attribute_map = {
        'count': 'count',
        'limit': 'limit',
        'offset': 'offset',
        'result_set': 'resultSet'
    }

    def __init__(self, count=None, limit=None, offset=None, result_set=None):  # noqa: E501
        """PageDTOAnalysisType - a model defined in Swagger"""  # noqa: E501

        self._count = None
        self._limit = None
        self._offset = None
        self._result_set = None
        self.discriminator = None

        if count is not None:
            self.count = count
        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset
        if result_set is not None:
            self.result_set = result_set

    @property
    def count(self):
        """Gets the count of this PageDTOAnalysisType.  # noqa: E501


        :return: The count of this PageDTOAnalysisType.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this PageDTOAnalysisType.


        :param count: The count of this PageDTOAnalysisType.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def limit(self):
        """Gets the limit of this PageDTOAnalysisType.  # noqa: E501


        :return: The limit of this PageDTOAnalysisType.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this PageDTOAnalysisType.


        :param limit: The limit of this PageDTOAnalysisType.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this PageDTOAnalysisType.  # noqa: E501


        :return: The offset of this PageDTOAnalysisType.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this PageDTOAnalysisType.


        :param offset: The offset of this PageDTOAnalysisType.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def result_set(self):
        """Gets the result_set of this PageDTOAnalysisType.  # noqa: E501


        :return: The result_set of this PageDTOAnalysisType.  # noqa: E501
        :rtype: list[AnalysisType]
        """
        return self._result_set

    @result_set.setter
    def result_set(self, result_set):
        """Sets the result_set of this PageDTOAnalysisType.


        :param result_set: The result_set of this PageDTOAnalysisType.  # noqa: E501
        :type: list[AnalysisType]
        """

        self._result_set = result_set

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PageDTOAnalysisType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PageDTOAnalysisType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
