# coding: utf-8

"""
    Song API

    Song API reference for developers. SONG is an open source system for validating and tracking metadata about raw data submissions, assigning identifiers to entities of interest, and managing the state of the raw data with regards to publication and access  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from overture_song.api_client import ApiClient


class AnalysisApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_analysis(self, id, study_id, **kwargs):  # noqa: E501
        """GetAnalysis  # noqa: E501

        Retrieve the analysis object for an analysisId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_analysis(id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param str study_id: studyId (required)
        :return: Analysis
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_analysis_with_http_info(id, study_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_analysis_with_http_info(id, study_id, **kwargs)  # noqa: E501
            return data

    def get_analysis_with_http_info(self, id, study_id, **kwargs):  # noqa: E501
        """GetAnalysis  # noqa: E501

        Retrieve the analysis object for an analysisId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_analysis_with_http_info(id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param str study_id: studyId (required)
        :return: Analysis
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'study_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_analysis" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_analysis`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `get_analysis`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/studies/{studyId}/analysis/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Analysis',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_analysis_files(self, id, study_id, **kwargs):  # noqa: E501
        """GetAnalysisFiles  # noqa: E501

        Retrieve the file objects for an analysisId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_analysis_files(id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param str study_id: studyId (required)
        :return: list[FileEntity]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_analysis_files_with_http_info(id, study_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_analysis_files_with_http_info(id, study_id, **kwargs)  # noqa: E501
            return data

    def get_analysis_files_with_http_info(self, id, study_id, **kwargs):  # noqa: E501
        """GetAnalysisFiles  # noqa: E501

        Retrieve the file objects for an analysisId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_analysis_files_with_http_info(id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param str study_id: studyId (required)
        :return: list[FileEntity]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'study_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_analysis_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_analysis_files`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `get_analysis_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/studies/{studyId}/analysis/{id}/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FileEntity]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_analysis_for_study(self, study_id, **kwargs):  # noqa: E501
        """GetAnalysesForStudy  # noqa: E501

        Retrieve all analysis objects for a studyId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_analysis_for_study(study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_id: studyId (required)
        :param str analysis_states: Non-empty comma separated list of analysis states to filter by
        :return: list[Analysis]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_analysis_for_study_with_http_info(study_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_analysis_for_study_with_http_info(study_id, **kwargs)  # noqa: E501
            return data

    def get_analysis_for_study_with_http_info(self, study_id, **kwargs):  # noqa: E501
        """GetAnalysesForStudy  # noqa: E501

        Retrieve all analysis objects for a studyId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_analysis_for_study_with_http_info(study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_id: studyId (required)
        :param str analysis_states: Non-empty comma separated list of analysis states to filter by
        :return: list[Analysis]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['study_id', 'analysis_states']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_analysis_for_study" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `get_analysis_for_study`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501

        query_params = []
        if 'analysis_states' in params:
            query_params.append(('analysisStates', params['analysis_states']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/studies/{studyId}/analysis', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Analysis]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_search(self, study_id, **kwargs):  # noqa: E501
        """IdSearch  # noqa: E501

        Search for analysis objects by specifying regex patterns for the donorIds, sampleIds, specimenIds, or fileIds request parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_search(study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_id: studyId (required)
        :param str donor_id: donorId
        :param str file_id: fileId
        :param str sample_id: sampleId
        :param str specimen_id: specimenId
        :return: list[Analysis]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_search_with_http_info(study_id, **kwargs)  # noqa: E501
        else:
            (data) = self.id_search_with_http_info(study_id, **kwargs)  # noqa: E501
            return data

    def id_search_with_http_info(self, study_id, **kwargs):  # noqa: E501
        """IdSearch  # noqa: E501

        Search for analysis objects by specifying regex patterns for the donorIds, sampleIds, specimenIds, or fileIds request parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_search_with_http_info(study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_id: studyId (required)
        :param str donor_id: donorId
        :param str file_id: fileId
        :param str sample_id: sampleId
        :param str specimen_id: specimenId
        :return: list[Analysis]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['study_id', 'donor_id', 'file_id', 'sample_id', 'specimen_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `id_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501

        query_params = []
        if 'donor_id' in params:
            query_params.append(('donorId', params['donor_id']))  # noqa: E501
        if 'file_id' in params:
            query_params.append(('fileId', params['file_id']))  # noqa: E501
        if 'sample_id' in params:
            query_params.append(('sampleId', params['sample_id']))  # noqa: E501
        if 'specimen_id' in params:
            query_params.append(('specimenId', params['specimen_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/studies/{studyId}/analysis/search/id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Analysis]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_search_with_body(self, request, study_id, **kwargs):  # noqa: E501
        """IdSearchWithBody  # noqa: E501

        Search for analysis objects by specifying an IdSearchRequest  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_search_with_body(request, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdSearchRequest request: request (required)
        :param str study_id: studyId (required)
        :return: list[Analysis]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.id_search_with_body_with_http_info(request, study_id, **kwargs)  # noqa: E501
        else:
            (data) = self.id_search_with_body_with_http_info(request, study_id, **kwargs)  # noqa: E501
            return data

    def id_search_with_body_with_http_info(self, request, study_id, **kwargs):  # noqa: E501
        """IdSearchWithBody  # noqa: E501

        Search for analysis objects by specifying an IdSearchRequest  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.id_search_with_body_with_http_info(request, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdSearchRequest request: request (required)
        :param str study_id: studyId (required)
        :return: list[Analysis]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request', 'study_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_search_with_body" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `id_search_with_body`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `id_search_with_body`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/studies/{studyId}/analysis/search/id', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Analysis]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def publish_analysis(self, id, study_id, **kwargs):  # noqa: E501
        """PublishAnalysis  # noqa: E501

        Publish an analysis. This checks to see if the files associated with the input analysisId exist in the storage server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.publish_analysis(id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param str study_id: studyId (required)
        :param bool ignore_undefined_md5: Ignores files that have an undefined MD5 checksum when publishing
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.publish_analysis_with_http_info(id, study_id, **kwargs)  # noqa: E501
        else:
            (data) = self.publish_analysis_with_http_info(id, study_id, **kwargs)  # noqa: E501
            return data

    def publish_analysis_with_http_info(self, id, study_id, **kwargs):  # noqa: E501
        """PublishAnalysis  # noqa: E501

        Publish an analysis. This checks to see if the files associated with the input analysisId exist in the storage server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.publish_analysis_with_http_info(id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param str study_id: studyId (required)
        :param bool ignore_undefined_md5: Ignores files that have an undefined MD5 checksum when publishing
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'study_id', 'ignore_undefined_md5']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method publish_analysis" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `publish_analysis`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `publish_analysis`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501

        query_params = []
        if 'ignore_undefined_md5' in params:
            query_params.append(('ignoreUndefinedMd5', params['ignore_undefined_md5']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/studies/{studyId}/analysis/publish/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def suppress_analysis(self, id, study_id, **kwargs):  # noqa: E501
        """SuppressAnalysis  # noqa: E501

        Suppress an analysis. Used if a previously published analysis is no longer needed. Instead of removing the analysis, it is marked as \"suppressed\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suppress_analysis(id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param str study_id: studyId (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.suppress_analysis_with_http_info(id, study_id, **kwargs)  # noqa: E501
        else:
            (data) = self.suppress_analysis_with_http_info(id, study_id, **kwargs)  # noqa: E501
            return data

    def suppress_analysis_with_http_info(self, id, study_id, **kwargs):  # noqa: E501
        """SuppressAnalysis  # noqa: E501

        Suppress an analysis. Used if a previously published analysis is no longer needed. Instead of removing the analysis, it is marked as \"suppressed\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suppress_analysis_with_http_info(id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param str study_id: studyId (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'study_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method suppress_analysis" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `suppress_analysis`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `suppress_analysis`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/studies/{studyId}/analysis/suppress/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unpublish_analysis(self, id, study_id, **kwargs):  # noqa: E501
        """UnpublishAnalysis  # noqa: E501

        Unpublish an analysis. Set the analysis status to unpublished  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unpublish_analysis(id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param str study_id: studyId (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unpublish_analysis_with_http_info(id, study_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unpublish_analysis_with_http_info(id, study_id, **kwargs)  # noqa: E501
            return data

    def unpublish_analysis_with_http_info(self, id, study_id, **kwargs):  # noqa: E501
        """UnpublishAnalysis  # noqa: E501

        Unpublish an analysis. Set the analysis status to unpublished  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unpublish_analysis_with_http_info(id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param str study_id: studyId (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'study_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unpublish_analysis" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `unpublish_analysis`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `unpublish_analysis`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/studies/{studyId}/analysis/unpublish/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_analysis(self, analysis_id, study_id, update_analysis_request, **kwargs):  # noqa: E501
        """UpdateAnalysis  # noqa: E501

        Update dynamic-data for for an analysis  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_analysis(analysis_id, study_id, update_analysis_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str analysis_id: analysisId (required)
        :param str study_id: studyId (required)
        :param JsonNode update_analysis_request: updateAnalysisRequest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_analysis_with_http_info(analysis_id, study_id, update_analysis_request, **kwargs)  # noqa: E501
        else:
            (data) = self.update_analysis_with_http_info(analysis_id, study_id, update_analysis_request, **kwargs)  # noqa: E501
            return data

    def update_analysis_with_http_info(self, analysis_id, study_id, update_analysis_request, **kwargs):  # noqa: E501
        """UpdateAnalysis  # noqa: E501

        Update dynamic-data for for an analysis  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_analysis_with_http_info(analysis_id, study_id, update_analysis_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str analysis_id: analysisId (required)
        :param str study_id: studyId (required)
        :param JsonNode update_analysis_request: updateAnalysisRequest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['analysis_id', 'study_id', 'update_analysis_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_analysis" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'analysis_id' is set
        if ('analysis_id' not in params or
                params['analysis_id'] is None):
            raise ValueError("Missing the required parameter `analysis_id` when calling `update_analysis`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `update_analysis`")  # noqa: E501
        # verify the required parameter 'update_analysis_request' is set
        if ('update_analysis_request' not in params or
                params['update_analysis_request'] is None):
            raise ValueError("Missing the required parameter `update_analysis_request` when calling `update_analysis`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'analysis_id' in params:
            path_params['analysisId'] = params['analysis_id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_analysis_request' in params:
            body_params = params['update_analysis_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/studies/{studyId}/analysis/{analysisId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
