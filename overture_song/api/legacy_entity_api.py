# coding: utf-8

"""
    Song API

    Song API reference for developers. SONG is an open source system for validating and tracking metadata about raw data submissions, assigning identifiers to entities of interest, and managing the state of the raw data with regards to publication and access  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from overture_song.api_client import ApiClient


class LegacyEntityApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def find_legacy_entities(self, **kwargs):  # noqa: E501
        """FindLegacyEntities  # noqa: E501

        Page through LegacyEntity data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_legacy_entities(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access:
        :param object fields: fields
        :param str file_name:
        :param str gnos_id:
        :param str id:
        :param int offset:
        :param Object page: Results page you want to retrieve (0..N)
        :param int page_number:
        :param int page_size:
        :param bool paged:
        :param str project_code:
        :param Object size: Number of records per page.
        :param bool sort_sorted:
        :param bool sort_unsorted:
        :param bool unpaged:
        :return: JsonNode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_legacy_entities_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_legacy_entities_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_legacy_entities_with_http_info(self, **kwargs):  # noqa: E501
        """FindLegacyEntities  # noqa: E501

        Page through LegacyEntity data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_legacy_entities_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str access:
        :param object fields: fields
        :param str file_name:
        :param str gnos_id:
        :param str id:
        :param int offset:
        :param Object page: Results page you want to retrieve (0..N)
        :param int page_number:
        :param int page_size:
        :param bool paged:
        :param str project_code:
        :param Object size: Number of records per page.
        :param bool sort_sorted:
        :param bool sort_unsorted:
        :param bool unpaged:
        :return: JsonNode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access', 'fields', 'file_name', 'gnos_id', 'id', 'offset', 'page', 'page_number', 'page_size', 'paged', 'project_code', 'size', 'sort_sorted', 'sort_unsorted', 'unpaged']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_legacy_entities" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'access' in params:
            query_params.append(('access', params['access']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501
        if 'gnos_id' in params:
            query_params.append(('gnosId', params['gnos_id']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'paged' in params:
            query_params.append(('paged', params['paged']))  # noqa: E501
        if 'project_code' in params:
            query_params.append(('projectCode', params['project_code']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort_sorted' in params:
            query_params.append(('sort.sorted', params['sort_sorted']))  # noqa: E501
        if 'sort_unsorted' in params:
            query_params.append(('sort.unsorted', params['sort_unsorted']))  # noqa: E501
        if 'unpaged' in params:
            query_params.append(('unpaged', params['unpaged']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/entities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonNode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_legacy_entity(self, id, **kwargs):  # noqa: E501
        """GetLegacyEntity  # noqa: E501

        Read entity data for a legacy entity id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_legacy_entity(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :return: Legacy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_legacy_entity_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_legacy_entity_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_legacy_entity_with_http_info(self, id, **kwargs):  # noqa: E501
        """GetLegacyEntity  # noqa: E501

        Read entity data for a legacy entity id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_legacy_entity_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :return: Legacy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_legacy_entity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_legacy_entity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/entities/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Legacy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
