# coding: utf-8

"""
    Song API

    Song API reference for developers. SONG is an open source system for validating and tracking metadata about raw data submissions, assigning identifiers to entities of interest, and managing the state of the raw data with regards to publication and access  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Donor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'donor_id': 'str',
        'gender': 'str',
        'info': 'JsonNode',
        'study_id': 'str',
        'submitter_donor_id': 'str'
    }

    attribute_map = {
        'donor_id': 'donorId',
        'gender': 'gender',
        'info': 'info',
        'study_id': 'studyId',
        'submitter_donor_id': 'submitterDonorId'
    }

    def __init__(self, donor_id=None, gender=None, info=None, study_id=None, submitter_donor_id=None):  # noqa: E501
        """Donor - a model defined in Swagger"""  # noqa: E501

        self._donor_id = None
        self._gender = None
        self._info = None
        self._study_id = None
        self._submitter_donor_id = None
        self.discriminator = None

        if donor_id is not None:
            self.donor_id = donor_id
        if gender is not None:
            self.gender = gender
        if info is not None:
            self.info = info
        if study_id is not None:
            self.study_id = study_id
        if submitter_donor_id is not None:
            self.submitter_donor_id = submitter_donor_id

    @property
    def donor_id(self):
        """Gets the donor_id of this Donor.  # noqa: E501


        :return: The donor_id of this Donor.  # noqa: E501
        :rtype: str
        """
        return self._donor_id

    @donor_id.setter
    def donor_id(self, donor_id):
        """Sets the donor_id of this Donor.


        :param donor_id: The donor_id of this Donor.  # noqa: E501
        :type: str
        """

        self._donor_id = donor_id

    @property
    def gender(self):
        """Gets the gender of this Donor.  # noqa: E501


        :return: The gender of this Donor.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Donor.


        :param gender: The gender of this Donor.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def info(self):
        """Gets the info of this Donor.  # noqa: E501


        :return: The info of this Donor.  # noqa: E501
        :rtype: JsonNode
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this Donor.


        :param info: The info of this Donor.  # noqa: E501
        :type: JsonNode
        """

        self._info = info

    @property
    def study_id(self):
        """Gets the study_id of this Donor.  # noqa: E501


        :return: The study_id of this Donor.  # noqa: E501
        :rtype: str
        """
        return self._study_id

    @study_id.setter
    def study_id(self, study_id):
        """Sets the study_id of this Donor.


        :param study_id: The study_id of this Donor.  # noqa: E501
        :type: str
        """

        self._study_id = study_id

    @property
    def submitter_donor_id(self):
        """Gets the submitter_donor_id of this Donor.  # noqa: E501


        :return: The submitter_donor_id of this Donor.  # noqa: E501
        :rtype: str
        """
        return self._submitter_donor_id

    @submitter_donor_id.setter
    def submitter_donor_id(self, submitter_donor_id):
        """Sets the submitter_donor_id of this Donor.


        :param submitter_donor_id: The submitter_donor_id of this Donor.  # noqa: E501
        :type: str
        """

        self._submitter_donor_id = submitter_donor_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Donor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Donor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
