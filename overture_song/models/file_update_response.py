# coding: utf-8

"""
    Song API

    Song API reference for developers. SONG is an open source system for validating and tracking metadata about raw data submissions, assigning identifiers to entities of interest, and managing the state of the raw data with regards to publication and access  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FileUpdateResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_update_type': 'str',
        'message': 'str',
        'original_analysis_state': 'str',
        'original_file': 'FileDTO',
        'unpublished_analysis': 'bool'
    }

    attribute_map = {
        'file_update_type': 'fileUpdateType',
        'message': 'message',
        'original_analysis_state': 'originalAnalysisState',
        'original_file': 'originalFile',
        'unpublished_analysis': 'unpublishedAnalysis'
    }

    def __init__(self, file_update_type=None, message=None, original_analysis_state=None, original_file=None, unpublished_analysis=None):  # noqa: E501
        """FileUpdateResponse - a model defined in Swagger"""  # noqa: E501

        self._file_update_type = None
        self._message = None
        self._original_analysis_state = None
        self._original_file = None
        self._unpublished_analysis = None
        self.discriminator = None

        if file_update_type is not None:
            self.file_update_type = file_update_type
        if message is not None:
            self.message = message
        if original_analysis_state is not None:
            self.original_analysis_state = original_analysis_state
        if original_file is not None:
            self.original_file = original_file
        if unpublished_analysis is not None:
            self.unpublished_analysis = unpublished_analysis

    @property
    def file_update_type(self):
        """Gets the file_update_type of this FileUpdateResponse.  # noqa: E501


        :return: The file_update_type of this FileUpdateResponse.  # noqa: E501
        :rtype: str
        """
        return self._file_update_type

    @file_update_type.setter
    def file_update_type(self, file_update_type):
        """Sets the file_update_type of this FileUpdateResponse.


        :param file_update_type: The file_update_type of this FileUpdateResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["NO_UPDATE", "CONTENT_UPDATE", "METADATA_UPDATE"]  # noqa: E501
        if file_update_type not in allowed_values:
            raise ValueError(
                "Invalid value for `file_update_type` ({0}), must be one of {1}"  # noqa: E501
                .format(file_update_type, allowed_values)
            )

        self._file_update_type = file_update_type

    @property
    def message(self):
        """Gets the message of this FileUpdateResponse.  # noqa: E501


        :return: The message of this FileUpdateResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this FileUpdateResponse.


        :param message: The message of this FileUpdateResponse.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def original_analysis_state(self):
        """Gets the original_analysis_state of this FileUpdateResponse.  # noqa: E501


        :return: The original_analysis_state of this FileUpdateResponse.  # noqa: E501
        :rtype: str
        """
        return self._original_analysis_state

    @original_analysis_state.setter
    def original_analysis_state(self, original_analysis_state):
        """Sets the original_analysis_state of this FileUpdateResponse.


        :param original_analysis_state: The original_analysis_state of this FileUpdateResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["PUBLISHED", "UNPUBLISHED", "SUPPRESSED"]  # noqa: E501
        if original_analysis_state not in allowed_values:
            raise ValueError(
                "Invalid value for `original_analysis_state` ({0}), must be one of {1}"  # noqa: E501
                .format(original_analysis_state, allowed_values)
            )

        self._original_analysis_state = original_analysis_state

    @property
    def original_file(self):
        """Gets the original_file of this FileUpdateResponse.  # noqa: E501


        :return: The original_file of this FileUpdateResponse.  # noqa: E501
        :rtype: FileDTO
        """
        return self._original_file

    @original_file.setter
    def original_file(self, original_file):
        """Sets the original_file of this FileUpdateResponse.


        :param original_file: The original_file of this FileUpdateResponse.  # noqa: E501
        :type: FileDTO
        """

        self._original_file = original_file

    @property
    def unpublished_analysis(self):
        """Gets the unpublished_analysis of this FileUpdateResponse.  # noqa: E501


        :return: The unpublished_analysis of this FileUpdateResponse.  # noqa: E501
        :rtype: bool
        """
        return self._unpublished_analysis

    @unpublished_analysis.setter
    def unpublished_analysis(self, unpublished_analysis):
        """Sets the unpublished_analysis of this FileUpdateResponse.


        :param unpublished_analysis: The unpublished_analysis of this FileUpdateResponse.  # noqa: E501
        :type: bool
        """

        self._unpublished_analysis = unpublished_analysis

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileUpdateResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileUpdateResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
