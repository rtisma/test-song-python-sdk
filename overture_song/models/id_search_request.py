# coding: utf-8

"""
    Song API

    Song API reference for developers. SONG is an open source system for validating and tracking metadata about raw data submissions, assigning identifiers to entities of interest, and managing the state of the raw data with regards to publication and access  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IdSearchRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'donor_id': 'str',
        'object_id': 'str',
        'sample_id': 'str',
        'specimen_id': 'str'
    }

    attribute_map = {
        'donor_id': 'donorId',
        'object_id': 'objectId',
        'sample_id': 'sampleId',
        'specimen_id': 'specimenId'
    }

    def __init__(self, donor_id=None, object_id=None, sample_id=None, specimen_id=None):  # noqa: E501
        """IdSearchRequest - a model defined in Swagger"""  # noqa: E501

        self._donor_id = None
        self._object_id = None
        self._sample_id = None
        self._specimen_id = None
        self.discriminator = None

        if donor_id is not None:
            self.donor_id = donor_id
        if object_id is not None:
            self.object_id = object_id
        if sample_id is not None:
            self.sample_id = sample_id
        if specimen_id is not None:
            self.specimen_id = specimen_id

    @property
    def donor_id(self):
        """Gets the donor_id of this IdSearchRequest.  # noqa: E501

        regex pattern. Default is wildcard  # noqa: E501

        :return: The donor_id of this IdSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._donor_id

    @donor_id.setter
    def donor_id(self, donor_id):
        """Sets the donor_id of this IdSearchRequest.

        regex pattern. Default is wildcard  # noqa: E501

        :param donor_id: The donor_id of this IdSearchRequest.  # noqa: E501
        :type: str
        """

        self._donor_id = donor_id

    @property
    def object_id(self):
        """Gets the object_id of this IdSearchRequest.  # noqa: E501

        regex pattern. Default is wildcard  # noqa: E501

        :return: The object_id of this IdSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this IdSearchRequest.

        regex pattern. Default is wildcard  # noqa: E501

        :param object_id: The object_id of this IdSearchRequest.  # noqa: E501
        :type: str
        """

        self._object_id = object_id

    @property
    def sample_id(self):
        """Gets the sample_id of this IdSearchRequest.  # noqa: E501

        regex pattern. Default is wildcard  # noqa: E501

        :return: The sample_id of this IdSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._sample_id

    @sample_id.setter
    def sample_id(self, sample_id):
        """Sets the sample_id of this IdSearchRequest.

        regex pattern. Default is wildcard  # noqa: E501

        :param sample_id: The sample_id of this IdSearchRequest.  # noqa: E501
        :type: str
        """

        self._sample_id = sample_id

    @property
    def specimen_id(self):
        """Gets the specimen_id of this IdSearchRequest.  # noqa: E501

        regex pattern. Default is wildcard  # noqa: E501

        :return: The specimen_id of this IdSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._specimen_id

    @specimen_id.setter
    def specimen_id(self, specimen_id):
        """Sets the specimen_id of this IdSearchRequest.

        regex pattern. Default is wildcard  # noqa: E501

        :param specimen_id: The specimen_id of this IdSearchRequest.  # noqa: E501
        :type: str
        """

        self._specimen_id = specimen_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdSearchRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdSearchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
