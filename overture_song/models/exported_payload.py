# coding: utf-8

"""
    Song API

    Song API reference for developers. SONG is an open source system for validating and tracking metadata about raw data submissions, assigning identifiers to entities of interest, and managing the state of the raw data with regards to publication and access  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ExportedPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payloads': 'list[JsonNode]',
        'study_id': 'str'
    }

    attribute_map = {
        'payloads': 'payloads',
        'study_id': 'studyId'
    }

    def __init__(self, payloads=None, study_id=None):  # noqa: E501
        """ExportedPayload - a model defined in Swagger"""  # noqa: E501

        self._payloads = None
        self._study_id = None
        self.discriminator = None

        if payloads is not None:
            self.payloads = payloads
        if study_id is not None:
            self.study_id = study_id

    @property
    def payloads(self):
        """Gets the payloads of this ExportedPayload.  # noqa: E501


        :return: The payloads of this ExportedPayload.  # noqa: E501
        :rtype: list[JsonNode]
        """
        return self._payloads

    @payloads.setter
    def payloads(self, payloads):
        """Sets the payloads of this ExportedPayload.


        :param payloads: The payloads of this ExportedPayload.  # noqa: E501
        :type: list[JsonNode]
        """

        self._payloads = payloads

    @property
    def study_id(self):
        """Gets the study_id of this ExportedPayload.  # noqa: E501


        :return: The study_id of this ExportedPayload.  # noqa: E501
        :rtype: str
        """
        return self._study_id

    @study_id.setter
    def study_id(self, study_id):
        """Sets the study_id of this ExportedPayload.


        :param study_id: The study_id of this ExportedPayload.  # noqa: E501
        :type: str
        """

        self._study_id = study_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExportedPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExportedPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
