# coding: utf-8

"""
    Song API

    Song API reference for developers. SONG is an open source system for validating and tracking metadata about raw data submissions, assigning identifiers to entities of interest, and managing the state of the raw data with regards to publication and access  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StudyWithDonors(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'donors': 'list[DonorWithSpecimens]',
        'info': 'JsonNode',
        'name': 'str',
        'organization': 'str',
        'study_id': 'str'
    }

    attribute_map = {
        'description': 'description',
        'donors': 'donors',
        'info': 'info',
        'name': 'name',
        'organization': 'organization',
        'study_id': 'studyId'
    }

    def __init__(self, description=None, donors=None, info=None, name=None, organization=None, study_id=None):  # noqa: E501
        """StudyWithDonors - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._donors = None
        self._info = None
        self._name = None
        self._organization = None
        self._study_id = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if donors is not None:
            self.donors = donors
        if info is not None:
            self.info = info
        if name is not None:
            self.name = name
        if organization is not None:
            self.organization = organization
        if study_id is not None:
            self.study_id = study_id

    @property
    def description(self):
        """Gets the description of this StudyWithDonors.  # noqa: E501


        :return: The description of this StudyWithDonors.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StudyWithDonors.


        :param description: The description of this StudyWithDonors.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def donors(self):
        """Gets the donors of this StudyWithDonors.  # noqa: E501


        :return: The donors of this StudyWithDonors.  # noqa: E501
        :rtype: list[DonorWithSpecimens]
        """
        return self._donors

    @donors.setter
    def donors(self, donors):
        """Sets the donors of this StudyWithDonors.


        :param donors: The donors of this StudyWithDonors.  # noqa: E501
        :type: list[DonorWithSpecimens]
        """

        self._donors = donors

    @property
    def info(self):
        """Gets the info of this StudyWithDonors.  # noqa: E501


        :return: The info of this StudyWithDonors.  # noqa: E501
        :rtype: JsonNode
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this StudyWithDonors.


        :param info: The info of this StudyWithDonors.  # noqa: E501
        :type: JsonNode
        """

        self._info = info

    @property
    def name(self):
        """Gets the name of this StudyWithDonors.  # noqa: E501


        :return: The name of this StudyWithDonors.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StudyWithDonors.


        :param name: The name of this StudyWithDonors.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def organization(self):
        """Gets the organization of this StudyWithDonors.  # noqa: E501


        :return: The organization of this StudyWithDonors.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this StudyWithDonors.


        :param organization: The organization of this StudyWithDonors.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def study_id(self):
        """Gets the study_id of this StudyWithDonors.  # noqa: E501


        :return: The study_id of this StudyWithDonors.  # noqa: E501
        :rtype: str
        """
        return self._study_id

    @study_id.setter
    def study_id(self, study_id):
        """Sets the study_id of this StudyWithDonors.


        :param study_id: The study_id of this StudyWithDonors.  # noqa: E501
        :type: str
        """

        self._study_id = study_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StudyWithDonors, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StudyWithDonors):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
