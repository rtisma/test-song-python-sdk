# coding: utf-8

"""
    Song API

    Song API reference for developers. SONG is an open source system for validating and tracking metadata about raw data submissions, assigning identifiers to entities of interest, and managing the state of the raw data with regards to publication and access  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from overture_song.api_client import ApiClient


class SchemaApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_analysis_type_version(self, name, **kwargs):  # noqa: E501
        """GetAnalysisTypeVersion  # noqa: E501

        Retrieves the latest version of a schema for an analysisType  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_analysis_type_version(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of an analysisType (required)
        :param bool unrendered_only: Only retrieve the unrendered schema that was initially registered
        :param int version: Optionally, retrieve a specific version of the analysisType
        :return: AnalysisType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_analysis_type_version_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_analysis_type_version_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_analysis_type_version_with_http_info(self, name, **kwargs):  # noqa: E501
        """GetAnalysisTypeVersion  # noqa: E501

        Retrieves the latest version of a schema for an analysisType  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_analysis_type_version_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of an analysisType (required)
        :param bool unrendered_only: Only retrieve the unrendered schema that was initially registered
        :param int version: Optionally, retrieve a specific version of the analysisType
        :return: AnalysisType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'unrendered_only', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_analysis_type_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_analysis_type_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'unrendered_only' in params:
            query_params.append(('unrenderedOnly', params['unrendered_only']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/schemas/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnalysisType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_registration_schema(self, **kwargs):  # noqa: E501
        """GetRegistrationSchema  # noqa: E501

        Retrieves the meta-schema used to validate AnalysisType schemas during registration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_schema(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_registration_schema_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_registration_schema_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_registration_schema_with_http_info(self, **kwargs):  # noqa: E501
        """GetRegistrationSchema  # noqa: E501

        Retrieves the meta-schema used to validate AnalysisType schemas during registration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_schema_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_schema" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/schemas/registration', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_analysis_types(self, **kwargs):  # noqa: E501
        """ListAnalysisTypes  # noqa: E501

        Retrieves a list of registered analysisTypes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_analysis_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool hide_schema: Hide the schema field from the response
        :param Object limit: Number of results to retrieve
        :param list[str] names: Comma separated list of names
        :param Object offset: Index of first result to retrieve
        :param int page_number:
        :param int page_size:
        :param bool paged:
        :param str sort: Comma separated fields to sort on
        :param bool sort_sorted:
        :param bool sort_unsorted:
        :param str sort_order: Sorting order: ASC|DESC. Default order: DESC
        :param bool unpaged:
        :param bool unrendered_only: Only retrieve the unrendered schema that was initially registered
        :param list[int] versions: Comma separated list of versions
        :return: PageDTOAnalysisType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_analysis_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_analysis_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_analysis_types_with_http_info(self, **kwargs):  # noqa: E501
        """ListAnalysisTypes  # noqa: E501

        Retrieves a list of registered analysisTypes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_analysis_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool hide_schema: Hide the schema field from the response
        :param Object limit: Number of results to retrieve
        :param list[str] names: Comma separated list of names
        :param Object offset: Index of first result to retrieve
        :param int page_number:
        :param int page_size:
        :param bool paged:
        :param str sort: Comma separated fields to sort on
        :param bool sort_sorted:
        :param bool sort_unsorted:
        :param str sort_order: Sorting order: ASC|DESC. Default order: DESC
        :param bool unpaged:
        :param bool unrendered_only: Only retrieve the unrendered schema that was initially registered
        :param list[int] versions: Comma separated list of versions
        :return: PageDTOAnalysisType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hide_schema', 'limit', 'names', 'offset', 'page_number', 'page_size', 'paged', 'sort', 'sort_sorted', 'sort_unsorted', 'sort_order', 'unpaged', 'unrendered_only', 'versions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_analysis_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'hide_schema' in params:
            query_params.append(('hideSchema', params['hide_schema']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'names' in params:
            query_params.append(('names', params['names']))  # noqa: E501
            collection_formats['names'] = 'multi'  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'paged' in params:
            query_params.append(('paged', params['paged']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'sort_sorted' in params:
            query_params.append(('sort.sorted', params['sort_sorted']))  # noqa: E501
        if 'sort_unsorted' in params:
            query_params.append(('sort.unsorted', params['sort_unsorted']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'unpaged' in params:
            query_params.append(('unpaged', params['unpaged']))  # noqa: E501
        if 'unrendered_only' in params:
            query_params.append(('unrenderedOnly', params['unrendered_only']))  # noqa: E501
        if 'versions' in params:
            query_params.append(('versions', params['versions']))  # noqa: E501
            collection_formats['versions'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/schemas', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageDTOAnalysisType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def register_analysis_type(self, request, **kwargs):  # noqa: E501
        """RegisterAnalysisType  # noqa: E501

        Registers an analysisType schema  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_analysis_type(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RegisterAnalysisTypeRequest request: request (required)
        :return: AnalysisType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.register_analysis_type_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.register_analysis_type_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def register_analysis_type_with_http_info(self, request, **kwargs):  # noqa: E501
        """RegisterAnalysisType  # noqa: E501

        Registers an analysisType schema  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_analysis_type_with_http_info(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RegisterAnalysisTypeRequest request: request (required)
        :return: AnalysisType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_analysis_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `register_analysis_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/schemas', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnalysisType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
